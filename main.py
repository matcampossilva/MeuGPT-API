from fastapi import FastAPI, Request
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import openai
import os
from enviar_whatsapp import enviar_whatsapp

app = FastAPI()

# Configura√ß√µes Google Sheets
URL_GOOGLE_SHEETS = 'https://docs.google.com/spreadsheets/d/1bhnyG0-DaH3gE687_tUEy9kVI7rV-bxJl10bRKkDl2Y/edit?usp=sharing'
SHEET_PAGANTES = 'Pagantes'
SHEET_GRATUITOS = 'Gratuitos'
LIMIT_INTERACOES = 10  # Limite de intera√ß√µes gratuitas

# Configura√ß√£o Google Sheets API
def conecta_google_sheets():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name('/etc/secrets/meugpt-api-sheets-92a9d439900d.json', scope)
    client = gspread.authorize(creds)
    return client

# Verifica se n√∫mero √© pagante
def verifica_pagante(numero):
    client = conecta_google_sheets()
    sheet = client.open_by_url(URL_GOOGLE_SHEETS).worksheet(SHEET_PAGANTES)
    lista = sheet.get_all_records()
    for linha in lista:
        if str(linha['WHATSAPP']) == numero and linha['STATUS'].upper() == 'ATIVO':
            return True
    return False

# Atualiza/Registra usu√°rios gratuitos
def atualiza_gratuitos(numero, nome, email):
    client = conecta_google_sheets()
    sheet = client.open_by_url(URL_GOOGLE_SHEETS).worksheet(SHEET_GRATUITOS)
    lista = sheet.get_all_records()
    encontrado = False
    for i, linha in enumerate(lista):
        if str(linha['WHATSAPP']) == numero:
            novo_valor = int(linha['CONTADOR']) + 1
            sheet.update_cell(i+2, 4, novo_valor)  # coluna CONTADOR
            encontrado = True
            return novo_valor
    if not encontrado:
        sheet.append_row([nome, numero, email, 1])
        return 1

# Configura√ß√£o OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# Prompt fixo
PROMPT_BASE = """
Voc√™ √© o Meu Conselheiro Financeiro pessoal, criado por Matheus Campos, CFP¬Æ.

Sua miss√£o √© organizar a vida financeira do usu√°rio respeitando rigorosamente esta hierarquia: Deus, fam√≠lia e trabalho, nesta ordem.

O dinheiro serve ao homem, jamais o contr√°rio. Seu objetivo √© ajudar o usu√°rio a usar o dinheiro com sabedoria, clareza e sem apego, alinhando sua vida financeira √† sua miss√£o espiritual e familiar.

Sua comunica√ß√£o √© sempre leve, amig√°vel e intimista, com leve toque goiano (ex.: "Uai!", "Tem base?"), provocando sempre perguntas curtas para o usu√°rio. Utilize emojis naturais e apropriados.

Seja conciso e pr√°tico, sem respostas muito longas. Oriente o usu√°rio a lan√ßar seus gastos, perguntar sobre d√≠vidas, investimentos ou qualquer quest√£o financeira.

Jamais mencione fontes ou arquivos, apenas incorpore os conhecimentos naturalmente. Nunca recomende div√≥rcio. Para crises financeiras no casamento, sempre proponha estrat√©gias pr√°ticas e espirituais alinhadas com S√£o Josemaria Escriv√° e a Doutrina Cat√≥lica.
"""

# Fun√ß√£o para consultar o ChatGPT
def consulta_chatgpt(nome, mensagem_usuario):
    mensagem_final = f"{PROMPT_BASE}\nUsu√°rio: {mensagem_usuario}\nMeu Conselheiro Financeiro:"
    try:
        resposta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": PROMPT_BASE},
                {"role": "user", "content": mensagem_usuario}
            ],
            max_tokens=500,
            temperature=0.7
        )
        return resposta['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"‚ùå Ocorreu um erro ao consultar o GPT: {e}"

# Endpoint principal
from fastapi import Form

@app.post("/webhook")
async def receber_mensagem(
    Body: str = Form(...),
    From: str = Form(...),
):

    numero = From.replace("whatsapp:", "").replace("+", "").strip()
    nome = "Usu√°rio"  # Nome gen√©rico, pois Twilio n√£o manda nome

    # A mensagem enviada pelo usu√°rio
    mensagem_usuario = Body

    if verifica_pagante(numero):
        resposta_gpt = consulta_chatgpt(nome, mensagem_usuario)
        enviar_whatsapp(resposta_gpt, numero_destino=f"+{numero}")
        return {"resposta": resposta_gpt}
    else:
        interacoes = atualiza_gratuitos(numero, nome, email="")
        if interacoes <= LIMIT_INTERACOES:
            resposta = f"Ol√°! üåü Voc√™ est√° na vers√£o gratuita ({interacoes}/{LIMIT_INTERACOES} intera√ß√µes). Para liberar acesso completo ao Meu Conselheiro Financeiro, clique aqui: [link para assinar]."
        else:
            resposta = f"Ei, seu limite gratuito acabou! üöÄ Quer liberar tudo? Acesse aqui: [link premium]."
        enviar_whatsapp(resposta, numero_destino=f"+{numero}")
        return {"resposta": resposta}

from fastapi import FastAPI, Request
from twilio.rest import Client
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import openai

app = FastAPI()

# Configura√ß√µes Google Sheets
URL_GOOGLE_SHEETS = 'https://docs.google.com/spreadsheets/d/1bhnyG0-DaH3gE687_tUEy9kVI7rV-bxJl10bRKkDl2Y/edit?usp=sharing'
SHEET_PAGANTES = 'Pagantes'
SHEET_GRATUITOS = 'Gratuitos'
LIMIT_INTERACOES = 10  # Limite gr√°tis

# Configura√ß√£o Google Sheets API
def conecta_google_sheets():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name('/etc/secrets/meugpt-api-sheets-92a9d439900d.json', scope)
    client = gspread.authorize(creds)
    return client

def verifica_pagante(numero):
    client = conecta_google_sheets()
    sheet = client.open_by_url(URL_GOOGLE_SHEETS).worksheet(SHEET_PAGANTES)
    lista = sheet.get_all_records()
    for linha in lista:
        if str(linha['WHATSAPP']) == numero and linha['STATUS'].upper() == 'ATIVO':
            return True
    return False

def atualiza_gratuitos(numero, nome, email):
    client = conecta_google_sheets()
    sheet = client.open_by_url(URL_GOOGLE_SHEETS).worksheet(SHEET_GRATUITOS)
    lista = sheet.get_all_records()
    encontrado = False
    for i, linha in enumerate(lista):
        if str(linha['WHATSAPP']) == numero:
            novo_valor = int(linha['CONTADOR']) + 1
            sheet.update_cell(i+2, 4, novo_valor)
            encontrado = True
            return novo_valor
    if not encontrado:
        sheet.append_row([nome, numero, email, 1])
        return 1

# ENV Variables Twilio e OpenAI
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

client_twilio = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
openai.api_key = OPENAI_API_KEY

# Prompt fixo do Meu Conselheiro Financeiro
PROMPT_BASE = """
Voc√™ √© o Meu Conselheiro Financeiro pessoal, criado por Matheus Campos, CFP¬Æ.

Sua miss√£o √© organizar a vida financeira do usu√°rio respeitando rigorosamente esta hierarquia: Deus, fam√≠lia e trabalho, nesta ordem.

O dinheiro serve ao homem, jamais o contr√°rio. Seu objetivo √© ajudar o usu√°rio a usar o dinheiro com sabedoria, clareza e sem apego, alinhando sua vida financeira √† sua miss√£o espiritual e familiar.

Sua comunica√ß√£o √© sempre leve, amig√°vel e intimista, com leve toque goiano (ex.: "Uai!", "Tem base?"), provocando sempre perguntas curtas para o usu√°rio. Utilize emojis naturais e apropriados.

Seja conciso e pr√°tico, sem respostas muito longas. Oriente o usu√°rio a lan√ßar seus gastos, perguntar sobre d√≠vidas, investimentos ou qualquer quest√£o financeira.

Jamais mencione fontes ou arquivos, apenas incorpore os conhecimentos naturalmente. Nunca recomende div√≥rcio. Para crises financeiras no casamento, sempre proponha estrat√©gias pr√°ticas e espirituais alinhadas com S√£o Josemaria Escriv√° e a Doutrina Cat√≥lica.

"""

# Fun√ß√£o para enviar WhatsApp
def enviar_whatsapp(mensagem, numero_destino):
    try:
        message = client_twilio.messages.create(
            from_=TWILIO_PHONE_NUMBER,
            body=mensagem,
            to=f'whatsapp:{numero_destino}'
        )
        print(f"‚úÖ Mensagem enviada com sucesso para {numero_destino}. SID: {message.sid}")
    except Exception as e:
        print(f"‚ùå Erro ao enviar WhatsApp: {e}")

# Endpoint principal
@app.post("/webhook")
async def receber_mensagem(request: Request):
    dados = await request.json()
    nome = dados['nome']
    numero = dados['whatsapp']
    email = dados.get('email', '')
    mensagem_usuario = dados['mensagem']

    if verifica_pagante(numero):
        # Usu√°rio pagante - libera full
        resposta_gpt = consulta_chatgpt(nome, mensagem_usuario)
        enviar_whatsapp(resposta_gpt, numero)
        return {"status": "Mensagem enviada para pagante"}
    else:
        # Usu√°rio gratuito - controla limite
        interacoes = atualiza_gratuitos(numero, nome, email)
        if interacoes <= LIMIT_INTERACOES:
            resposta_gpt = consulta_chatgpt(nome, mensagem_usuario)
            enviar_whatsapp(f"(Vers√£o Gratuita {interacoes}/{LIMIT_INTERACOES})\n\n{resposta_gpt}", numero)
            return {"status": "Mensagem enviada para gratuito"}
        else:
            msg = f"Ei {nome}, seu limite gratuito acabou! üöÄ Quer liberar tudo? Acesse aqui: [link premium]."
            enviar_whatsapp(msg, numero)
            return {"status": "Limite atingido"}

# Consulta √† API ChatGPT
def consulta_chatgpt(nome, mensagem_usuario):
    prompt_completo = f"{PROMPT_BASE}\nUsu√°rio ({nome}): {mensagem_usuario}\nConselheiro:"
    resposta = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt_completo,
        max_tokens=500,
        temperature=0.7
    )
    return resposta.choices[0].text.strip()
